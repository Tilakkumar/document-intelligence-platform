version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: document-intelligence-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=document_intelligence
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - document-intelligence-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: document-intelligence-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - document-intelligence-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: document-intelligence-backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password123@mongodb:27017/document_intelligence?authSource=admin
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TIKA_SERVER_URL=http://tika:9998
      - JAVA_OPTS=-Xmx2g -Xms1g
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
      - redis
      - tika
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - document-intelligence-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Apache Tika Server for document processing
  tika:
    image: apache/tika:2.9.1-full
    container_name: document-intelligence-tika
    restart: unless-stopped
    ports:
      - "9998:9998"
    command: ["java", "-jar", "/opt/tika/tika-server-standard.jar", "--host", "0.0.0.0", "--port", "9998"]
    networks:
      - document-intelligence-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: document-intelligence-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - document-intelligence-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: document-intelligence-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - document-intelligence-network

  # Elasticsearch for advanced search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: document-intelligence-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xmx1g -Xms1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - document-intelligence-network

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: document-intelligence-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - document-intelligence-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: document-intelligence-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - document-intelligence-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: document-intelligence-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - document-intelligence-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  document-intelligence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16